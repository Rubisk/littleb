Index: lisa.asd
===================================================================
RCS file: /cvsroot/lisa/lisa/lisa.asd,v
retrieving revision 1.7
diff -u -r1.7 lisa.asd
--- lisa.asd	11 Sep 2007 21:14:07 -0000	1.7
+++ lisa.asd	6 Jun 2008 16:25:14 -0000
@@ -100,7 +100,8 @@
                (:module rete
                         :pathname "rete/reference/"
                         :components
-                        ((:file "node-tests")
+                        ((:file "inter-pattern-filter")
+                         (:file "node-tests")
                          (:file "shared-node")
                          (:file "successor")
                          (:file "node-pair")
Index: src/rete/reference/inter-pattern-filter.lisp
===================================================================
RCS file: src/rete/reference/inter-pattern-filter.lisp
diff -N src/rete/reference/inter-pattern-filter.lisp
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/rete/reference/inter-pattern-filter.lisp	6 Jun 2008 16:25:18 -0000
@@ -0,0 +1,195 @@
+
+;;; Copyright (C) 2008 Aneil Mallavarapu
+
+;;; This library is free software; you can redistribute it and/or
+;;; modify it under the terms of the GNU Lesser General Public License
+;;; as published by the Free Software Foundation; either version 2.1
+;;; of the License, or (at your option) any later version.
+
+;;; This library is distributed in the hope that it will be useful,
+;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
+;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+;;; GNU Lesser General Public License for more details.
+
+;;; You should have received a copy of the GNU Lesser General Public License
+;;; along with this library; if not, write to the Free Software
+;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+;;; File: inter-pattern-filter.lisp
+
+(in-package "LISA")
+
+(defstruct (inter-pattern-filter (:constructor %make-inter-pattern-filter))
+  left-slot-name   ; = binding-slot-name
+  left-address     ; = binding-address
+  right-slot-name  ; = pattern-slot-name
+  ;; left/right-value-memories store hash-tables of tokens which match a particular value
+  ;; value memories are hash-tables where
+  ;;    key = slot-value, 
+  ;;    value = hash-table storing tokens (key=token-hash-code, value=token)
+  (negated nil)
+  (left-value-memory (make-hash-table :test #'equal))  
+  (right-value-memory (make-hash-table :test #'equal)))
+
+(defun make-inter-pattern-filter (slot)
+  (let ((binding (pattern-slot-slot-binding slot)))
+    (%make-inter-pattern-filter 
+     :left-slot-name (binding-slot-name binding)
+     :left-address (binding-address binding)
+     :right-slot-name (pattern-slot-name slot)
+     :negated (pattern-slot-negated slot))))
+;;;
+;;; LEFT/RIGHT-LOOKUPS: 
+;;; 
+(defun inter-pattern-filter-left-lookup (self right-token)
+  "Returns a hash-table of left-tokens which match the right-token for this slot-pattern binding"
+ (let* ((left-value-memory      (inter-pattern-filter-left-value-memory self))
+        (right-slot-name  (inter-pattern-filter-right-slot-name self))
+        (right-fact       (token-top-fact right-token))
+        (right-slot-value (get-slot-value right-fact right-slot-name)))
+
+   (cond
+    ((inter-pattern-filter-negated self)  (not-lookup left-value-memory right-slot-value))
+    (t                                    (get-token-memory left-value-memory right-slot-value)))))
+
+           
+(defun inter-pattern-filter-right-lookup (self left-tokens)
+  "Returns a hash-table of right-tokens which match the left-tokens for this slot-pattern binding"
+  (let* ((right-value-memory (inter-pattern-filter-right-value-memory self))
+         (left-slot-name     (inter-pattern-filter-left-slot-name self))
+         (left-fact          (token-find-fact left-tokens (inter-pattern-filter-left-address self)))
+         (left-slot-value    (get-slot-value left-fact left-slot-name)))
+    (cond
+     ((inter-pattern-filter-negated self)  (not-lookup right-value-memory left-slot-value))
+     (t                                    (get-token-memory right-value-memory left-slot-value)))))
+
+;;;
+;;; NOT handling:
+;;;
+(defun not-lookup (value-memory value)
+  "Returns a hash-table which contains an intersection of all tokens which do not match VALUE"
+  (let ((newht (copy-hash-table value-memory)))
+    ;; remove tokens which matching VALUE
+    (remhash value newht) 
+    ;; merge the remaining value memories
+    (apply #'merge-hash-tables nil (hash-values-to-list newht))))
+        
+(defun not-value-remove-token (value-memory value token)
+  "Removes TOKEN from all token memories which do not match VALUE"
+  (loop for k being the hash-keys of value-memory
+        for token-memory being the hash-values of value-memory
+        unless (equal k value)
+        do (forget-token token-memory token)))
+
+;;;
+;;; TOKEN-MEMORY - a value memory stores all tokens matching a particular value
+;;;                it is a hash-table mapping token-hash-codes to tokens
+;;;
+(defun inter-pattern-filter-left-token-memory (self value)
+  (get-token-memory (inter-pattern-filter-left-value-memory self) value))
+
+(defun inter-pattern-filter-right-token-memory (self value)
+  (get-token-memory (inter-pattern-filter-right-value-memory self) value))
+
+(defun get-token-memory (value-memory value)
+  (or (gethash value value-memory)
+      (setf (gethash value value-memory) (make-hash-table :test #'equal))))
+
+;;;
+;;; ADD LEFT/RIGHT TOKENS:
+;;;
+(defun inter-pattern-filter-add-left-tokens (self left-tokens)
+  (let* ((left-slot-name (inter-pattern-filter-left-slot-name self))
+         (fact           (token-find-fact left-tokens 
+                                          (inter-pattern-filter-left-address self)))
+         (value          (get-slot-value fact left-slot-name)))
+    (remember-token (inter-pattern-filter-left-token-memory self value)
+                    left-tokens)))
+
+(defun inter-pattern-filter-add-right-token (self right-token)
+  (let* ((right-slot-name  (inter-pattern-filter-right-slot-name self))
+         (fact             (token-top-fact right-token))
+         (value            (get-slot-value fact right-slot-name)))
+    (remember-token (inter-pattern-filter-right-token-memory self value)
+                    right-token)))
+
+;;;
+;;; REMOVE LEFT/RIGHT TOKENS:
+;;;
+
+(defun inter-pattern-filter-remove-left-tokens (self left-tokens)
+  (let* ((left-slot-name (inter-pattern-filter-left-slot-name self))
+         (fact           (token-find-fact left-tokens 
+                                          (inter-pattern-filter-left-address self)))
+         (value          (get-slot-value fact left-slot-name)))
+   (forget-token (inter-pattern-filter-left-token-memory self value)
+                      left-tokens)))
+
+
+(defun inter-pattern-filter-remove-right-token (self right-token)
+  (let* ((right-slot-name  (inter-pattern-filter-right-slot-name self))
+         (fact             (token-top-fact right-token))
+         (value            (get-slot-value fact right-slot-name)))
+   (forget-token (inter-pattern-filter-right-token-memory self value)
+                    right-token)))
+
+(defun inter-pattern-filter-left-size (self)
+  (value-memory-size (inter-pattern-filter-left-value-memory self)))
+
+(defun inter-pattern-filter-right-size (self)
+  (value-memory-size (inter-pattern-filter-right-value-memory self)))
+
+(defun value-memory-size (value-memory)
+  (hash-table-count 
+   (merge-hash-tables 
+    nil 
+    (hash-values-to-list value-memory))))
+
+(defmethod left-value-memory-count ((self inter-pattern-filter))
+  (inter-pattern-filter-left-size self))
+
+(defmethod right-value-memory-count ((self inter-pattern-filter))
+  (inter-pattern-filter-right-size self))
+
+(defun inter-pattern-filter-clear-memories (self)
+  (clrhash (inter-pattern-filter-left-value-memory self))
+  (clrhash (inter-pattern-filter-right-value-memory self)))
+
+;;;
+;;; HASH-TABLE utils:
+;;;
+
+(defun merge-hash-tables (&optional result &rest hash-tables)
+  "Copies the contents of hash-tables into RESULT.  
+   If argument RESULT is NIL, a new hash-table is created"
+  (flet ((hash-table-merge (ht1 ht2) ; merge ht2 into ht1
+           (copy-hash-table ht2 ht1)))
+    (reduce #'hash-table-merge 
+            (list* 
+             (or result
+                 (make-hash-table :test (if hash-tables
+                                            (hash-table-test (first hash-tables))
+                                            #'equal)))
+             hash-tables))))
+
+(defun copy-hash-table (ht1 &optional ht2)
+  "Copies hash-table HT1 - optionally to a user-provided hash-table, HT2"
+  (loop with result = (or ht2 (make-hash-table :test (hash-table-test ht1)))
+        for k being the hash-keys of ht1
+        for v being the hash-values of ht1
+        do (setf (gethash k result) v)
+        finally (return result)))
+
+(defun intersect-hash-table-keys (ht1 ht2)
+  "Creates a new hash-table with keys representing the intersection of keys from HT1 and HT2,
+   and the corresponding values of HT1."
+  (loop with newht = (make-hash-table :test (hash-table-test ht1))
+        for k being the hash-keys of ht1
+        for v being the hash-values of ht1
+        when (gethash k ht2)
+        do (setf (gethash k newht) v)
+        finally (return newht)))
+
+(defun hash-values-to-list (ht)
+  (loop for v being the hash-values of ht collect v))
+
Index: src/rete/reference/join-node.lisp
===================================================================
RCS file: /cvsroot/lisa/lisa/src/rete/reference/join-node.lisp,v
retrieving revision 1.16
diff -u -r1.16 join-node.lisp
--- src/rete/reference/join-node.lisp	11 Sep 2007 21:14:10 -0000	1.16
+++ src/rete/reference/join-node.lisp	6 Jun 2008 16:25:18 -0000
@@ -60,11 +60,11 @@
 (defun remove-token-from-right-memory (join-node token)
   (forget-token (join-node-right-memory join-node) token))
 
-(defun left-memory-count (join-node)
-  (hash-table-count (join-node-left-memory join-node)))
+(defmethod left-memory-count ((self join-node))
+  (hash-table-count (join-node-left-memory self)))
 
-(defun right-memory-count (join-node)
-  (hash-table-count (join-node-right-memory join-node)))
+(defmethod right-memory-count ((self join-node))
+  (hash-table-count (join-node-right-memory self)))
 
 (defmethod test-tokens ((self join-node) left-tokens right-token)
   (token-push-fact left-tokens (token-top-fact right-token))
@@ -107,3 +107,6 @@
             (left-memory-count self)
             (right-memory-count self)
             (length (join-node-tests self)))))
+
+(defmethod add-slot-filter ((self join-node) slot)
+  (join-node-add-test self (make-inter-pattern-test slot)))
Index: src/rete/reference/node2.lisp
===================================================================
RCS file: /cvsroot/lisa/lisa/src/rete/reference/node2.lisp,v
retrieving revision 1.21
diff -u -r1.21 node2.lisp
--- src/rete/reference/node2.lisp	11 Sep 2007 21:14:10 -0000	1.21
+++ src/rete/reference/node2.lisp	6 Jun 2008 16:25:20 -0000
@@ -24,43 +24,105 @@
 
 (in-package "LISA")
 
-(defclass node2 (join-node) ())
+;;;
+;;; Changes 2/20/2008 made by Aneil Mallavarapu:
+;;;         Introduced FILTER slot in node2, which can hold 0 or more inter-pattern-filters.
+;;;         An inter-pattern-filter reduces the number of tokens that must be 
+;;;         subjected to join-node-tests. It is defined in inter-pattern-filter.lisp.
+;;;         The filter uses hash-tables to quickly calculate a set of tokens
+;;;
+(defclass node2 (join-node) ((filters :initform () :accessor node2-filters)))
 
+(defun make-node2 ()
+  (make-instance 'node2))
+
+(defmethod add-slot-filter ((self node2) slot)
+  (push (make-inter-pattern-filter slot) (node2-filters self)))
+
+;;; TEST RIGHT MEMORY
 (defmethod test-against-right-memory ((self node2) left-tokens)
-  (loop for right-token being the hash-values of (join-node-right-memory self)
-      do (when (test-tokens self left-tokens right-token)
-           (pass-tokens-to-successor 
-            self (combine-tokens left-tokens right-token)))))
+  (loop for right-token being the hash-values of (node2-filter-right-memory self left-tokens)
+        when (test-tokens self left-tokens right-token)
+        do (pass-tokens-to-successor self (combine-tokens left-tokens right-token))))
+
+(defun node2-filter-right-memory (self left-tokens)
+  (cond
+   ((node2-filters self)
+    (loop for ipfilter in (node2-filters self)
+          for right-tokens = (inter-pattern-filter-right-lookup ipfilter left-tokens)
+                        then (intersect-hash-table-keys
+                              right-tokens
+                              (inter-pattern-filter-right-lookup ipfilter left-tokens))
+          until (zerop (hash-table-count right-tokens))
+          finally (return right-tokens)))
+   (t (join-node-right-memory self))))
 
+
+;;; TEST LEFT MEMORY
 (defmethod test-against-left-memory ((self node2) (right-token add-token))
-  (loop for left-tokens being the hash-values of (join-node-left-memory self)
-      do (when (test-tokens self left-tokens right-token)
-           (pass-tokens-to-successor 
-            self (combine-tokens left-tokens right-token)))))
-  
+  (loop for left-tokens being the hash-values of (node2-filter-left-memory self right-token)
+        when (test-tokens self left-tokens right-token)
+        do   (pass-tokens-to-successor
+              self
+              (combine-tokens left-tokens right-token))))
+
 (defmethod test-against-left-memory ((self node2) (right-token remove-token))
-  (loop for left-tokens being the hash-values of (join-node-left-memory self)
-      do (when (test-tokens self left-tokens right-token)
-           (pass-tokens-to-successor
-            self (combine-tokens
-                  (make-remove-token left-tokens) right-token)))))
-  
+  (loop for left-tokens being the hash-values of (node2-filter-left-memory self right-token)
+        when (test-tokens self left-tokens right-token)
+        do   (pass-tokens-to-successor
+              self (combine-tokens
+                    (make-remove-token left-tokens) right-token))))
+
+(defun node2-filter-left-memory (self right-token)
+  (cond 
+   ((node2-filters self)
+    (loop for ipfilter in (node2-filters self)
+          for left-tokens* = (inter-pattern-filter-left-lookup ipfilter right-token)
+                        then (intersect-hash-table-keys
+                              left-tokens*
+                              (inter-pattern-filter-left-lookup ipfilter right-token))
+          until (zerop (hash-table-count left-tokens*))
+          finally (return left-tokens*)))
+   (t (join-node-left-memory self))))
+
+;;;
+;;; ACCEPT LEFT/RIGHT ADD-TOKEN
+;;;
 (defmethod accept-tokens-from-left ((self node2) (left-tokens add-token))
-  (add-tokens-to-left-memory self left-tokens)
+  (node2-add-tokens-to-left-memory self left-tokens)
   (test-against-right-memory self left-tokens))
 
+(defun node2-add-tokens-to-left-memory (self left-tokens)
+  (add-tokens-to-left-memory self left-tokens)
+  (dolist (ipfilter (node2-filters self))
+    (inter-pattern-filter-add-left-tokens ipfilter left-tokens)))
+      
 (defmethod accept-token-from-right ((self node2) (right-token add-token))
-  (add-token-to-right-memory self right-token)
+  (node2-add-token-to-right-memory self right-token)
   (test-against-left-memory self right-token))
 
+(defun node2-add-token-to-right-memory (self right-token)
+  (add-token-to-right-memory self right-token)
+  (dolist (ipfilter (node2-filters self))
+    (inter-pattern-filter-add-right-token ipfilter right-token)))
+
+     
+;;;
+;;; ACCEPT LEFT/RIGHT REMOVE-TOKEN
+;;;
 (defmethod accept-tokens-from-left ((self node2) (left-tokens remove-token))
   (when (remove-tokens-from-left-memory self left-tokens)
+    (dolist (ipfilter (node2-filters self))
+      (inter-pattern-filter-remove-left-tokens ipfilter left-tokens))
     (test-against-right-memory self left-tokens)))
 
 (defmethod accept-token-from-right ((self node2) (right-token remove-token))
   (when (remove-token-from-right-memory self right-token)
+    (dolist (ipfilter (node2-filters self))
+      (inter-pattern-filter-remove-right-token ipfilter right-token))
     (test-against-left-memory self right-token)))
 
-(defun make-node2 ()
-  (make-instance 'node2))
-
+;;; CLEAR-MEMORIES
+(defmethod clear-memories ((self node2))
+  (dolist (ipfilter (node2-filters self))
+    (inter-pattern-filter-clear-memories ipfilter)))
Index: src/rete/reference/rete-compiler.lisp
===================================================================
RCS file: /cvsroot/lisa/lisa/src/rete/reference/rete-compiler.lisp,v
retrieving revision 1.52
diff -u -r1.52 rete-compiler.lisp
--- src/rete/reference/rete-compiler.lisp	11 Sep 2007 21:14:10 -0000	1.52
+++ src/rete/reference/rete-compiler.lisp	6 Jun 2008 16:25:20 -0000
@@ -146,8 +146,7 @@
   (labels ((add-simple-join-node-test (slot)
              (unless (= (binding-address (pattern-slot-slot-binding slot))
                         (parsed-pattern-address pattern))
-               (join-node-add-test join-node
-                                   (make-inter-pattern-test slot))))
+               (add-slot-filter join-node slot)))
            (add-slot-constraint-test (slot)
              (join-node-add-test join-node
                                  (make-predicate-test
@@ -209,12 +208,12 @@
   (add-successor (leaf-node) (make-terminal-node rule) #'pass-token))
 
 ;;; addresses a problem reported by Andrew Philpot on 9/6/2007
-(defun copy-node-test-table (src)
-  (let ((target (make-hash-table :test #'equal)))
-    (maphash (lambda (key value)
-               (setf (gethash key target) value))
-             src)
-    target))
+(defun copy-node-test-table (src) src)
+;  (let ((target (make-hash-table :test #'equal)))
+;    (maphash (lambda (key value)
+;               (setf (gethash key target) value))
+;             src)
+;    target))
 
 (defun compile-rule-into-network (rete-network patterns rule)
   (let ((*root-nodes* (rete-roots rete-network))
